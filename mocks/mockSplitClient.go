// Code generated by MockGen. DO NOT EDIT.
// Source: splitClient.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=splitClient.go -destination=mocks/mockSplitClient.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSplitClient is a mock of SplitClient interface.
type MockSplitClient struct {
	ctrl     *gomock.Controller
	recorder *MockSplitClientMockRecorder
	isgomock struct{}
}

// MockSplitClientMockRecorder is the mock recorder for MockSplitClient.
type MockSplitClientMockRecorder struct {
	mock *MockSplitClient
}

// NewMockSplitClient creates a new mock instance.
func NewMockSplitClient(ctrl *gomock.Controller) *MockSplitClient {
	mock := &MockSplitClient{ctrl: ctrl}
	mock.recorder = &MockSplitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSplitClient) EXPECT() *MockSplitClientMockRecorder {
	return m.recorder
}

// Treatment mocks base method.
func (m *MockSplitClient) Treatment(key any, feature string, attributes map[string]any) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Treatment", key, feature, attributes)
	ret0, _ := ret[0].(string)
	return ret0
}

// Treatment indicates an expected call of Treatment.
func (mr *MockSplitClientMockRecorder) Treatment(key, feature, attributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Treatment", reflect.TypeOf((*MockSplitClient)(nil).Treatment), key, feature, attributes)
}
